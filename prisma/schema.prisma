// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  // previewFeatures = ["mongodb"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id                    String                @id @default(auto()) @map("_id") @db.ObjectId
  firstname             String?
  lastname              String?
  email                 String                @unique
  phoneNumber           String                @unique
  password              String
  role                  Role                  @default(user)
  refreshTokens         RefreshTokens[]
  status                Status                @default(inactive)
  isBlocked             Boolean               @default(false)
  isSuperuser           Boolean               @default(false)
  isVerified            Boolean               @default(false)
  resetToken            String?               @unique
  resetTokenExpiry      DateTime?
  address               Address?
  profession            String?
  birth                 DateTime?
  profilePhoto          String?
  ipAdress              String[]
  deviceId              String[]
  isApproved            Boolean               @default(false)
  referrralCode         String?
  // emailVerifiedAt       DateTime?
  otpVerifications      UserOtpVerification[]
  profileComplete       DateTime?
  identificationType    String?
  identificationExpiry  DateTime?
  documentIdentityImage String?
  statusKyc             Kyc                   @default(none)
  dateOfVerification    DateTime?
  sponsorShipCode       String?
  lastLogin             DateTime?
  // settings JsonMap
  twoFactorAuth         Boolean               @default(false)
  failedLoginAttempts   Int                   @default(0)
  lastFailedLogin       DateTime?
  createdAt             DateTime              @default(now())
  updatedAt             DateTime              @updatedAt
  PasswordReset         PasswordReset[]
}

model UserOtpVerification {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  otp        String
  otpExpires DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model PasswordReset {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @db.ObjectId
  token     String
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

type Address {
  street  String
  city    String
  zip     String
  area    String
  country String
}

enum Status {
  active
  inactive
  blocked
  unblocked
}

enum Kyc {
  none
  pending
  approved
  rejected
}

enum Role {
  superadmin
  admin
  user
}

model RefreshTokens {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  hashedToken String
  userId      String   @db.ObjectId
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}
